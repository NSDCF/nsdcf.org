// Get appropriate color and variant from $color map.
//
// name    - String specifying specific color scheme color.
// variant - String specifying variant of name. If null,
//           defaults to 'base'.
//
// Examples
//
//   color(primary)
//   color(primary, light)
//
// Returns color value or null if name or variant not found.
@function color($name: 'primary', $variant: 'base')
  $color: null

  // Get the nested color group from $colors map
  $color-group: map-get($colors, $name)

  // Get the requested variant
  @if $color-group
    $color: map-get($color-group, $variant)
    @if $color == null
      @warn "Color variant `#{$variant}` not found in color group `#{$name}`"
  @else
    @warn "Color group `#{$name}` not found in $colors map."

  @return $color

@function tint($color, $percent: 10%)
  @return mix(white, $color, $percent)

@function shade($color, $percent: 10%)
  @return mix(black, $color, $percent)

@function powerNumber($number, $exp)
  $value: 1
  @if $exp > 0
    @for $i from 1 through $exp
      $value: $value * $number
  @else if $exp < 0
    @for $i from 1 through -$exp
      $value: $value / $number
  @return $value

@function colorLuminance($color)
  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color))
  @each $name, $value in $color-rgb
    $adjusted: 0
    $value: $value / 255
    @if $value < 0.03928
      $value: $value / 12.92
    @else
      $value: ($value + .055) / 1.055
      $value: powerNumber($value, 2)
    $color-rgb: map-merge($color-rgb, ($name: $value))
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722)

@function findColorInvert($color)
  @if (colorLuminance($color) > 0.55)
    @return rgba(#000, 0.7)
  @else
    @return #fff
